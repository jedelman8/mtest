#!/usr/bin/python

# Copyright 2015 Michael Ben-Ami <michael@networktocode.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_aaa_server
short_description: Manages AAA server global configuration
description:
    - Manages AAA server global configuration
author: Michael Ben-Ami
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - The server_type parameter is always required.
    - Changes to the global AAA server key are not idempotent. 
    - state=default will set the supplied parameters to their default values.
      The parameters that you want to default must also be set to default.
      If global_key=default, the global key will be removed.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    server_type:
        description:
            - The server type is either radius or tacacs
        required: true
        default: null
        choices: ['radius', 'tacacs']
        aliases: []
    global_key:
        description:
            - Global AAA shared secret
        required: false
        default: null
        choices: []
        aliases: []
    encrypt_type:
        description:
            - The state of encryption applied to the entered global key.
              O: clear text
              7: encrypted
            - Type-6 encryption is not supported.
        required: false
        default: null
        choices: ['0', '7']
        aliases: []    
    deadtime:
        description:
            - Duration for which a non-reachable AAA server is skipped, in minutes
              Range: 1-1440
              Device default: 0
        required: false
        default: null
        choices: []
        aliases: []
    timeout:
        description:
            - Global AAA server timeout period, in seconds
              Range: 1-60
              Device default: 5
        required: false
        default: null
        choices: []
        aliases: []
    directed_request:
        description:
            - Enables direct authentication requests to AAA server
            - Device default: disabled
        required: false
        default: null
        choices: ['enabled', 'disabled']
        aliases: []        
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','default']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''
# Radius Server Basic settings
  - name: "Radius Server Basic settings"
    nxos_aaa_server: server_type=radius timeout=9 deadtime=20 directed_request=enabled host={{ inventory_hostname }}

# Tacacs Server Basic settings
  - name: "Tacacs Server Basic settings"
    nxos_aaa_server: server_type=tacacs timeout=8 deadtime=19 directed_request=disabled host={{ inventory_hostname }}
   
# Setting Global Key
  - name: "AAA Server Global Key"
    nxos_aaa_server: server_type=radius global_key=test-key host={{ inventory_hostname }}
'''

import socket

try:
    HAS_PYCSCO = True
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import aaa
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def main():
    module = AnsibleModule(
        argument_spec=dict(
            server_type=dict(type='str',
                             choices=['radius', 'tacacs'], required=True),
            global_key=dict(type='str'),
            encrypt_type=dict(type='str',
                              choices=['0', '7']),
            deadtime=dict(type='str'),
            timeout=dict(type='str'),
            directed_request=dict(type='str',
                                  choices=['enabled', 'disabled', 'default']),
            state=dict(choices=['default', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    common_keys = ('state', 'host', 'username', 'password',
                   'protocol', 'CHECKMODE')

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])
    device = Device(ip=host, username=username,
                    password=password, protocol=protocol)
    changed = False

    proposed = dict((k, v) for k, v in module.params.iteritems()
                    if v is not None and k not in common_keys)

    commands = []

    if module.params['encrypt_type']\
       and not module.params['global_key']:
        module.fail_json(
            msg='encrypt_type must be used with global_key')

    server_type = proposed.get('server_type')

    try:
        existing = aaa.get_aaa_server_info(device, server_type)
    except CLIError as e:
        module.fail_json(msg=str(e))

    if module.params['state'] == 'present':
        deadtime = proposed.get('deadtime')
        if deadtime:
            try:
                if int(deadtime) < 0 or int(deadtime) > 1440:
                    raise ValueError
            except ValueError:
                module.fail_json(
                    msg='deadtime must be an integer between 0 and 1440')

        timeout = proposed.get('timeout')
        if timeout:
            try:
                if int(timeout) < 1 or int(timeout) > 60:
                    raise ValueError
            except ValueError:
                module.fail_json(
                    msg='timeout must be an integer between 1 and 60')

        delta = dict(set(proposed.iteritems()).difference(
            existing.iteritems()))
        if delta:
            command = aaa.config_aaa_server(delta, server_type)
            if command:
                commands.append(command)
    elif module.params['state'] == 'default':
        for k, v in proposed.iteritems():
            if k != 'server_type' and v != 'default':
                module.fail_json(
                    msg='Parameters must be set to "default" when state=default')
        command = aaa.default_aaa_server(proposed, server_type)
        if command:
            commands.append(command)

    cmds = ''
    if commands:
        cmds = nxapi_lib.nested_cmd_list_to_string(commands)
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
            except CLIError as e:
                module.fail_json(msg=str(e) + ": " + cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = module.params['state']
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        results['final'] = aaa.get_aaa_server_info(device, server_type)
    else:
        results['final'] = existing

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
