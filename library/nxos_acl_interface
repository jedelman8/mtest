#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_acl_interface
short_description: Manages applying ACLs to interfaces
description
    - Manages applying ACLs to interfaces
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    name:
        description:
            - Case sensitive name of the access list (ACL)
        required: true
        default: null
        choices: []
        aliases: []
    interface:
        description:
            - Full name of interface. MUST be the full name!!
        required: true
        default: null
        choices: []
        aliases: []
    direction:
        description:
            - Direction ACL to be applied in on the interface
        required: true
        default: null
        choices: ['ingress', 'egress']
        aliases: []
    state:
        description:
            - Specify desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''


'''

import socket

HAS_PYCSCO = True
try:
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import security
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def main():

    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=False, type='str'),
            interface=dict(required=True),
            direction=dict(required=True, choices=['egress', 'ingress']),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    state = module.params['state']
    name = module.params['name']
    interface = module.params['interface'].lower()
    direction = module.params['direction'].lower()

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    proposed = dict(name=name, interface=interface, direction=direction)

    # includes all interfaces the ACL is applied to (list)
    get_existing = security.get_acl_interface(device, name)

    # interface_acls = includes entries of this ACL on the interface (list)
    # this_dir_acl_intf = dict - not null if it already exists
    interfaces_acls, this_dir_acl_intf = security.other_existing_acl(
        get_existing, interface, direction)

    changed = False

    cmds = ''
    commands = []

    # delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))
    if state == 'present':
        if not this_dir_acl_intf:
            command = security.apply_acl(proposed)
            if command:
                commands.append(command)

    elif state == 'absent':
        if this_dir_acl_intf:
            command = security.remove_acl(proposed)
            if command:
                commands.append(command)

    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
        if cmds:
            if module.check_mode:
                module.exit_json(changed=True, commands=cmds)
            else:
                changed = True
                try:
                    device.config(cmds)
                except CLIError as e:
                    module.fail_json(msg=str(e))

    results = {}
    results['proposed'] = proposed
    results['existing'] = this_dir_acl_intf
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        get_existing = security.get_acl_interface(device, name)
        interfaces_acls, this_dir_acl_intf = security.other_existing_acl(
            get_existing, interface, direction)
        results['final'] = this_dir_acl_intf
        results['interfaces_acl_on'] = get_existing
    else:
        results['final'] = this_dir_acl_intf
        results['interfaces_acl_on'] = get_existing

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
