#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_command
short_description: Send raw commands to Cisco NX-API enabled devices
description:
    - Raw show and config commands can be sent to NX-API enabled devices.
      For show commands there is the ability to return structured
      or raw text data.
      The command param when type=config can be a list or string with commands
      separated by a comma.
author: Jason Edelman (@jedelman8)
notes:
    - Only a single show command can be sent per task while multiple
      config commands can be sent.
    - Single show command or list of config commands or series of config
      commands separated by a comma supported
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
options:
    command:
        description:
            - Show command as a string or a string of config commands
              separated by a comma or a list of config
              commands (complex args in Ansible)
        required: true
        default: null
        choices: []
        aliases: []
    type:
        description:
            - Represents the type of command being sent to the device
        required: true
        default: null
        choices: ['show','config']
        aliases: []
    text:
        description:
            - Dictates how data will be returned for show commands.
              Set to true if NX-API doesn't support structured output
              for a given command
        required: false
        default: null
        choices: [true,false]
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# Get CLI raw text output for a given command
- nxos_command: command='show run interface mgmt0 | inc description' host={{ inventory_hostname }} text=true type=show

# Get structured JSON data for given command
- nxos_command: command='show interface Ethernet1/1' host={{ inventory_hostname }} type=show

# Configure secondary interface on Eth1/2 with command as string
- nxos_command: command='interface Eth1/2,ip address 5.5.5.5/24 secondary' host={{ inventory_hostname }} type=config

# Configure secondary interface on Eth1/2 with command as list
- nxos_command:
    host: "{{ inventory_hostname }}"
    type: config
    command: ['interface Eth1/2','ip address 5.3.3.5/24 secondary']
'''

try:
    import xmltodict
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            command=dict(required=True),
            text=dict(choices=BOOLEANS, type='bool'),
            type=dict(choices=['show', 'config'], required=True),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str')
        ),
        supports_check_mode=False
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    command = module.params['command']
    text = module.params['text'] or False
    cmd_type = module.params['type'].lower()

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    if cmd_type == 'show':
        if isinstance(command, list):
            module.fail_json(msg='Only single show commands are supported. '
                             + 'Lists are only supported for config changes '
                             + 'at this time.')
    if cmd_type == 'config':
        if text:
            module.fail_json(msg='Do not use text=true when using '
                             + 'cmd_type=config. The text param is only '
                             + 'supported when cmd_type=show')

    args = dict(command=command, text=text, cmd_type=cmd_type)
    proposed = {}
    changed = False
    for param, value in args.iteritems():
        if value:
            proposed[param] = value

    if cmd_type == 'config':
        if isinstance(command, str):
            command_list = command.split(',')
            command = nxapi_lib.cmd_list_to_string(command_list)
        elif isinstance(command, list):
            command = nxapi_lib.cmd_list_to_string(command)

    if cmd_type == 'show':
        data_dict = xmltodict.parse(device.show(command, text=text)[1])
        get_data = data_dict['ins_api']['outputs']['output']
        clierror = get_data.get('clierror', None)
        errmsg = get_data.get('msg', None)
        if clierror:
            raise IOError(clierror, errmsg)
        else:
            body = get_data['body']
    elif cmd_type == 'config':
        data_dict = xmltodict.parse(device.config(command)[1])
        changed = True
        get_data = data_dict['ins_api']['outputs']['output']
        try:
            for each in get_data:
                clierror = each.get('clierror', None)
                msg = each.get('msg', None)
                if clierror:
                    raise IOError(clierror, msg)
        except AttributeError:
            clierror = get_data.get('clierror', None)
            msg = get_data.get('msg', None)
        except:
            return data

        if clierror:
            raise IOError(clierror, msg)
        else:
            body = get_data

    results = {}
    results['changed'] = changed
    results['proposed'] = proposed
    results['commands'] = command
    results['results'] = body

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
