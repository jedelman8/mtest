#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_copy
short_description: Copy file from remote server to Nexus switch
description:
    - Commands executed locally on the switch to copy a file from a
      remote server to a particular path/dir on the Nexus switch
author: Jason Edelman (@jedelman8)
notes:
    - This module was tested with a remote Ubuntu 14.04 machine
      using SCP.
    - Cannot override files on the switch with this module.  User should
      ensure the file does not exist first with nxos_dir if needed or
      change the name of the dest file name.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
    - xmltodict
options:
    server_host:
        description:
            - IP Address or hostname (resolvable by switch) of the remote
              server that has currently has the file needed
        required: true
        default: null
        choices: []
        aliases: []
    server_path:
        description:
            - Absolute path including file name
        required: true
        default: null
        choices: []
        aliases: []
    server_un:
        description:
            - Username used to login to the server from the switch
        required: true
        default: null
        choices: []
        aliases: []
    server_pw:
        description:
            - Password used to login to the server from the switch
        required: true
        default: null
        choices: []
        aliases: []
    local_path:
        description:
            - Path on the switch where the file should be stored upon transfer
        required: true
        default: null
        choices: []
        aliases: []
    vrf:
        description:
            - VRF used to source communication to the remote file server
        required: false
        default: default
        choices: []
        aliases: []
    copy_type:
        description:
            - Protocol used to copy file from remote server to switch
        required: false
        default: scp
        choices: ['scp']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# copy config file from server to switch
- nxos_copy:
    server_host=192.168.200.56
    server_path='/home/cisco/Public/switch_config.cfg'
    server_un=cisco
    server_pw=cisco
    copy_type=scp
    local_path='bootflash:switch_config.cfg'
    vrf=management
    host={{ inventory_hostname }}

'''

try:
    import xmltodict
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            server_host=dict(required=True),
            server_path=dict(required=True),
            server_un=dict(required=True),
            server_pw=dict(required=True),
            local_path=dict(required=True),
            vrf=dict(default='default'),
            copy_type=dict(choices=['scp'], required=True),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=False
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])
    server_pw = module.params['server_pw']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)
    device.set_timeout = 120

    local_path = module.params['local_path']
    if ':' in local_path:
        location = local_path.split(':')[0]
        rightmost = local_path.split(':')[-1]
        if '/' in rightmost:
            file_name = rightmost.split('/')[-1]
            path_list = rightmost.split('/')[:-1]
            path = location + ':' + '/'.join(path_list) + '/'
        else:
            file_name = rightmost
            path = location
    else:
        module.fail_json(msg='invalid format for path.  Requires ":"'
                         + 'Example- bootflash:scripts/my_script.py')

    existing_files = nxapi_lib.switch_files_list(device, path)
    if file_name in existing_files:
        module.fail_json(msg='cannot overwrite a file.  change filename in '
                         + 'local_path param')

    commands = 'terminal dont-ask ; terminal password {} ; '.format(server_pw)

    # example: copy scp://cisco@192.168.200.17/home/cisco/abcdefg.cfg \
    # bootflash:abcdefgggg.cfg vrf management
    commands += 'copy {copy_type}://{server_un}@'.format(**module.params) \
                + '{server_host}{server_path} '.format(**module.params) \
                + '{local_path} vrf {vrf}'.format(**module.params)

    # module.exit_json(c=commands)
    results = device.config(commands)
    resdict = xmltodict.parse(results[1])['ins_api']['outputs']['output']

    results = {}
    results['commands'] = commands
    results['terminal'] = resdict

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
