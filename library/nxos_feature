#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_feature
short_description: Manage features in NX-API enabled devices
description:
    - Offers ability to enable and disable features in NX-OS
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - feature name must match that from the CLI
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    feature:
        description:
            - Name of feature
        required: true
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Desired state of the feature
        required: true
        default: null
        choices: ['enabled','disabled']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# Ensure lacp is enabled
- nxos_feature: feature=lacp state=enabled host={{ inventory_hostname }}

# Ensure ospf is disabled
- nxos_feature: feature=ospf state=disabled host={{ inventory_hostname }}

# Ensure vpc is enabled
- nxos_feature: feature=vpc state=enabled host={{ inventory_hostname }}

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            feature=dict(type='str', required=True),
            state=dict(choices=['enabled', 'disabled'], required=True),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    feature = module.params['feature'].lower()
    state = module.params['state'].lower()

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    avail_features = nxapi_lib.get_feature_list(device)
    if feature not in avail_features:
        module.fail_json(
            msg='Invalid feature name.',
            features_currently_supported=avail_features,
            invalid_feature=feature)

    existing_state = nxapi_lib.feature_enabled(device, feature)
    if existing_state:
        existstate = 'enabled'
    else:
        existstate = 'disabled'

    existing = dict(state=existstate)
    proposed = dict(state=state)

    changed = False
    cmds = ''
    commands = []
    postrun = {}
    delta = set(proposed.iteritems()).difference(existing.iteritems())
    if state == 'enabled':
        if delta:
            command = nxapi_lib.get_commands_enable_feature(feature)
            commands.append(command)
    elif state == 'disabled':
        if delta:
            command = nxapi_lib.get_commands_disable_feature(feature)
            commands.append(command)

    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    results = {}
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
            existing_state = nxapi_lib.feature_enabled(device, feature)
            if existing_state:
                existstate = 'enabled'
            else:
                existstate = 'disabled'
            postrun = dict(state=existstate)
            results['new'] = postrun

    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
