#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_hsrp
short_description: Manages HSRP configuration on NX-API enabled devices
description:
    - Manages HSRP configuration on NX-API enabled devices
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - HSRP feature needs to be enabled first on the system
    - SVIs must exist before using this module
    - Interface must be a L3 port before using this module
    - Even when md5 is selected, only UNENCRYPTED key strings are supported
      in this release
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    group:
        description:
            - hsrp group number
        required: true
        default: null
        choices: []
        aliases: []
    interface:
        description:
            - Full name of interface that is being managed for HSRP
        required: true
        default: null
        choices: []
        aliases: []
    version:
        description:
            - nxos_hsrp version
        required: false
        default: 2
        choices: ['1','2']
        aliases: []
    priority:
        description:
            - hsrp priority
        required: false
        default: null
        choices: []
        aliases: []
    vip:
        description:
            - hsrp virtual IP address
        required: true
        default: null
        choices: []
        aliases: []
    auth_string:
        description:
            - Authentication string
        required: false
        default: null
        choices: []
        aliases: []
    auth_type:
        description:
            - Authentication type
        required: false
        default: null
        choices: ['text','md5']
        aliases: []
    state:
        description:
            - Specify desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# ensure hsrp is configured with following params on a SVI
- nxos_hsrp: group=10 vip=10.1.1.1 priority=150 interface=vlan10 preempt=enabled host={{ inventory_hostname }}

# ensure hsrp is configured with following params on a SVI
- nxos_hsrp: group=10 vip=10.1.1.1 priority=150 interface=vlan10 preempt=enabled host={{ inventory_hostname }} auth_type=text auth_string=CISCO

# removing hsrp config for given interface, group, and vip
- nxos_hsrp: group=10 interface=vlan10 vip=10.1.1.1 host={{ inventory_hostname }} state=absent

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            group=dict(required=True, type='str'),
            interface=dict(required=True),
            version=dict(choices=['1', '2'], default='2'),
            priority=dict(type='str'),
            preempt=dict(type='str', choices=['disabled', 'enabled']),
            vip=dict(required=True),
            auth_type=dict(choices=['text', 'md5']),
            auth_string=dict(type='str'),
            state=dict(choices=['absent', 'present'], default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    interface = module.params['interface']
    group = module.params['group']
    version = module.params['version']
    state = module.params['state']
    priority = module.params['priority']
    preempt = module.params['preempt']
    vip = module.params['vip']
    auth_type = module.params['auth_type']
    auth_string = module.params['auth_string']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    interface = interface.lower()
    args = dict(group=group, version=version, priority=priority,
                preempt=preempt, vip=vip, auth_type=auth_type,
                auth_string=auth_string)

    if not nxapi_lib.feature_enabled(device, 'hsrp'):
        module.fail_json(msg='HSRP feature needs to be enabled first')

    intf_type = nxapi_lib.get_interface_type(interface)
    if intf_type != 'ethernet':
        if nxapi_lib.is_default(device, interface) == 'DNE':
            module.fail_json(msg='That interface does not exist yet.  Create '
                             + 'it first.', interface=interface)
    elif intf_type == 'ethernet':
        mode = nxapi_lib.get_interface_mode(device, interface)
        if mode == 'layer2':
            module.fail_json(msg='That interface is a layer2 port.  Make it '
                             + 'a layer 3 port first.', interface=interface)
    if auth_type or auth_string:
        if not (auth_type and auth_string):
            module.fail_json(msg='When using auth parameters, you need BOTH '
                             + ' auth_type AND auth_string.')

    proposed = {}
    for param, value in args.iteritems():
        if value:
            proposed[param] = value

    existing = nxapi_lib.get_hsrp_group(device, group, interface)
    # Can't use md5 encryption with hsrp v1
    # And BTW, we are just offering have "md5 0 key-string" not using 7 yet
    # this will enforce better practice.
    if proposed.get('auth_type', None) == 'md5':
        if proposed.get('version', None) == '1':
            module.fail_json(msg="It's recommended to use HSRP v2 "
                             + "when auth_type=md5")
        if not proposed.get('version', None) and existing['version'] == '1':
            module.fail_json(msg="Existing HSRP version is v1. It's "
                             + "recommended to use HSRP v2 when auth_type=md5")
    elif not proposed.get('auth_type', None):
        if proposed.get('version', None) == '1' \
                and existing['auth_type'] == 'md5':
            module.fail_json(msg="Existing auth_type is md5. It's recommended "
                             + " to use HSRP v2 when using md5")

    changed = False
    cmds = ''
    commands = []
    if state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if delta:
            command = nxapi_lib.get_commands_config_hsrp(delta,
                                                         interface,
                                                         args)
            commands.append(command)
    elif state == 'absent':
        if existing:
            command = nxapi_lib.get_commands_remove_hsrp(group, interface)
            commands.append(command)

    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
        if cmds:
            if module.check_mode:
                module.exit_json(changed=True, commands=cmds)
            else:
                changed = True
                device.config(cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_hsrp_group(device, group, interface)
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
