#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_igmp
short_description: Manages IGMP global configuration
description:
    - Manages IGMP global configuration configuration settings
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - When state=default, all supported params will be reset to a default state
    - If restart is set to true with other params set, the restart will happen
      last, i.e. after the configuration takes place
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    flush_routes:
        description:
            - Removes routes when the IGMP process is restarted. By default,
              routes are not flushed.
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    enforce_rtr_alert:
        description:
            - Enables or disables the enforce router alert option check for
              IGMPv2 and IGMPv3 packets
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    restart:
        description:
            - restarts the igmp process (using an exec config command)
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present', 'default']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

# default igmp global params (all params except restart)
- nxos_igmp: state=default host={{ inventory_hostname }}

# ensure the following igmp global config exists on the device
- nxos_igmp: flush_routes=true enforce_rtr_alert=true host={{ inventory_hostname }}

# restart the igmp process
- nxos_igmp: restart=true host={{ inventory_hostname }}
'''

import socket

HAS_PYCSCO = True
try:
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import mcast
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def main():

    module = AnsibleModule(
        argument_spec=dict(
            flush_routes=dict(choices=BOOLEANS, type='bool'),
            enforce_rtr_alert=dict(choices=BOOLEANS, type='bool'),
            restart=dict(choices=BOOLEANS, type='bool'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            state=dict(choices=['present', 'default'], default='present'),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )
    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    state = module.params['state']

    flush_routes = module.params['flush_routes']
    enforce_rtr_alert = module.params['enforce_rtr_alert']
    restart = module.params['restart']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    existing = mcast.get_igmp_global(device)

    changed = False

    commands = []

    args = dict(flush_routes=flush_routes, enforce_rtr_alert=enforce_rtr_alert)

    proposed = dict((param, value) for (param, value) in args.iteritems()
                    if value is not None)

    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))

    if state == 'present':
        delta = dict(
                     set(proposed.iteritems()).difference(existing.iteritems())
                     )
        if delta:
            command = mcast.config_igmp(delta)
            if command:
                commands.append(command)
    elif state == 'default':
        proposed = mcast.get_igmp_defaults()
        delta = dict(
                     set(proposed.iteritems()).difference(existing.iteritems())
                     )
        if delta:
            command = mcast.config_igmp(delta)
            if command:
                commands.append(command)

    if restart:
        commands.append(['restart igmp'])

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    results = {}

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
            except CLIError as e:
                module.fail_json(msg=str(e))

    results['proposed'] = proposed
    results['existing'] = existing
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        results['final'] = mcast.get_igmp_global(device)
        if restart:
            results['final']['restart'] = True
    else:
        results['final'] = existing
        results['final']['restart'] = False


    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
