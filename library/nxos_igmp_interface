#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_igmp_interface
short_description: Manages IGMP interface configuration
description:
    - Manages IGMP interface configuration settings
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - When state=default, supported params will be reset to a default state.
      These include: version, startup_query_interval, startup_query_count,
      robustness, querier_timeout, query_mrt, query_interval, last_member_qrt,
      last_member_query_count, group_timeout, report_llg, and immediate_leave
    - When state=absent, configs for will oif_prefix, oif_source, and
      oif_routemap will be removed and in addition, the other params will be
      defaulted
    - PIM must be enabled to use this module
    - This module is for Layer 3 interfaces
    - Route-map check not performed (same as CLI) check when configuring
      route-map with 'static-oif'
    - If restart is set to true with other params set, the restart will happen
      last, i.e. after the configuration takes place
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    flush_routes:
        description:
            - Removes routes when the IGMP process is restarted. By default,
              routes are not flushed.
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    enforce_rtr_alert:
        description:
            - Enables or disables the enforce router alert option check for
              IGMPv2 and IGMPv3 packets
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    restart:
        description:
            - restarts the igmp process (using an exec config command)
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present', 'default']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''
import socket

try:
    HAS_PYCSCO = True
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import mcast
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def main():

    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            version=dict(),
            startup_query_interval=dict(),
            startup_query_count=dict(),
            robustness=dict(),
            querier_timeout=dict(),
            query_mrt=dict(),
            query_interval=dict(),
            last_member_qrt=dict(),
            last_member_query_count=dict(),
            group_timeout=dict(),
            report_llg=dict(choices=BOOLEANS, type='bool'),
            immediate_leave=dict(choices=BOOLEANS, type='bool'),
            oif_routemap=dict(),
            oif_prefix=dict(),
            oif_source=dict(),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            state=dict(choices=['present', 'absent', 'default'],
                       default='present'),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )
    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    state = module.params['state']

    interface = module.params['name']
    oif_prefix = module.params['oif_prefix']
    oif_source = module.params['oif_source']
    oif_routemap = module.params['oif_routemap']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    if oif_source:
        if not oif_prefix:
            module.fail_json(msg='oif_prefix required when setting oif_source')

    if not nxapi_lib.feature_enabled(device, 'pim'):
        module.fail_json(msg='pim needs to be enabled first')

    if nxapi_lib.get_interface_mode(device, interface) == 'layer2':
        module.fail_json(msg='this module only works on Layer 3 interfaces')

    if oif_prefix and oif_routemap:
        module.fail_json(msg='cannot use oif_prefix AND oif_routemap.'
                         + '  select one.')

    existing = mcast.get_igmp_interface(device, interface)

    if not existing.get('version'):
        module.fail_json(msg='pim needs to be enabled on the interface')

    existing_oif_prefix_source = existing.get('oif_prefix_source')
    # not json serializable
    existing.pop('oif_prefix_source')

    if oif_routemap and existing_oif_prefix_source:
        module.fail_json(msg='Delete static-oif configurations on this '
                         ' interface if you \nwant to use a routemap')

    if oif_prefix and existing.get('routemap'):
        moodule.fail_json(msg='Delete static-oif route-map configuration '
                          ' on this interface if \nyou want to config '
                          ' static entries')

    changed = False

    commands = []

    OUT = ['CHECKMODE', 'host', 'password', 'username', 'state', 'protocol',
           'name']

    args = dict((k, v) for k, v in module.params.iteritems() if k not in OUT)

    proposed = dict((param, value) for (param, value) in args.iteritems()
                    if value is not None)

    CANNOT_ABSENT = ['version', 'startup_query_interval',
                     'startup_query_count', 'robustness', 'querier_timeout',
                     'query_mrt', 'query_interval', 'last_member_qrt',
                     'last_member_query_count', 'group_timeout', 'report_llg',
                     'immediate_leave']

    if state == 'absent':
        for each in CANNOT_ABSENT:
            if each in proposed.keys():
                module.fail_json(msg='only params: oif_prefix, oif_source, '
                                 + 'oif_routemap\ncan be used when \
                                 state=absent')

    # delta check for all params except oif_prefix and oif_source
    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))

    # now check to see there is a delta for prefix and source command option
    found_both = False
    found_prefix = False

    if existing_oif_prefix_source:
        if oif_prefix and oif_source:
            for each in existing_oif_prefix_source:
                if oif_prefix == each.get('prefix') and \
                        oif_source == each.get('source'):
                    found_both = True
            if not found_both:
                delta['prefix'] = oif_prefix
                delta['source'] = oif_source
        elif oif_prefix:
            for each in existing_oif_prefix_source:
                if oif_prefix == each.get('prefix') and not each.get('source'):
                    found_prefix = True
            if not found_prefix:
                delta['prefix'] = oif_prefix

    if state == 'present':
        if delta:
            command = mcast.config_igmp_interface(delta, found_both,
                                                  found_prefix)
            if command:
                commands.append(command)

    elif state == 'default':
        command = mcast.config_default_igmp_interface(existing,
                                                      delta,
                                                      found_both,
                                                      found_prefix)
        if command:
            commands.append(command)
    elif state == 'absent':
        command = None
        if existing.get('oif_routemap') or existing_oif_prefix_source:
            command = mcast.config_remove_oif(existing,
                                              existing_oif_prefix_source)

        if command:
            commands.append(command)

        command = mcast.config_default_igmp_interface(existing,
                                                      delta,
                                                      found_both,
                                                      found_prefix)
        if command:
            commands.append(command)

    cmds = ''
    if commands:
        commands.insert(0, ['interface ' + interface])
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    results = {}

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
            except CLIError as e:
                module.fail_json(msg=str(e))

    results['proposed'] = proposed
    results['existing'] = existing
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        results['final'] = mcast.get_igmp_interface(device, interface)
    else:
        results['final'] = existing
        results['final']['oif_prefix_source'] = existing_oif_prefix_source

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
