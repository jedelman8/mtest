#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_ipv4_interface
short_description: Manages L3 attributes for IPv4 interfaces
description:
    - Manages Layer 3 attributes for IPv4 interfaces
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - Interface must already be a L3 port when using this module.  Use
      nxos_interface to convert an interface from L2 to L3, if needed.
    - Logical interfaces (po, loop, svi) must be created first with the
      nxos_interface module prior to configuring the ipv4 address
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    interface:
        description:
            - Full name of interface, i.e. Ethernet1/1, vlan10
        required: true
        default: null
        choices: []
        aliases: []
    ip_addr:
        description:
            - IPv4 IP Address
        required: true
        default: null
        choices: []
        aliases: []
    mask:
        description:
            - Subnet mask for IPv4 IP Address
        required: true
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Specify desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# Ensure Eth1/1 has an IP address of 10.1.100.2/24
- nxos_ipv4_interface: interface=Ethernet1/1 ip_addr=10.1.100.2 mask=24 host={{ inventory_hostname }} state=absent

# Ensure vlan10 has an IP address of 100.1.1.3/24
- nxos_ipv4_interface: interface=vlan10 ip_addr=10.1.100.3 mask=22 host={{ inventory_hostname }}

# Ensure vlan10 does not have an IP address
- nxos_ipv4_interface: interface=vlan10 host={{ inventory_hostname }} state=absent

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            interface=dict(required=True),
            ip_addr=dict(required=True),
            mask=dict(type='str', required=True),
            state=dict(default='present', choices=['present', 'absent']),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    '''
    interface - full inteface name that will be
    managed, e.g. Ethernet1/1, Loopback10
    absent removes the existing IP config - no other params needed
    '''
    results = {}
    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    ip_addr = module.params['ip_addr']
    mask = module.params['mask']
    interface = module.params['interface']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    changed = False

    interface = interface.lower()
    intf_type = nxapi_lib.get_interface_type(interface)

    if state == 'present':
        if not ip_addr and not mask:
            module.fail_json(msg='Both params: ip_addr and mask are required')
    if intf_type == 'ethernet':
        mode = nxapi_lib.get_interface_mode(device, interface)
        if mode == 'layer2':
            module.fail_json(msg='Ensure interface is a Layer 3 port before '
                             + 'configuring IP Address and mask.  You can use '
                             + 'nxapi_interface')

    if intf_type != 'ethernet' and \
            nxapi_lib.is_default(device, interface) == 'DNE':
        module.fail_json(msg='interface does not exist on switch.  Verify '
                         + 'switch platform or create it first with '
                         + "nxapi_interface if it's a logical interface")

    proposed = dict(interface=interface, ip_addr=ip_addr, mask=mask)
    existing = nxapi_lib.get_ipv4_interface(device, interface)

    commands = []

    if state == 'absent':
        if existing['ip_addr']:
            command = nxapi_lib.get_remove_ipv4_config_commands(existing,
                                                                interface)
            commands.append(command)
    elif state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if existing['ip_addr'] is None or delta:
            command = nxapi_lib.get_config_ipv4_commands(delta,
                                                         interface,
                                                         existing)
            commands.append(command)
    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_ipv4_interface(device, interface)
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
