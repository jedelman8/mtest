#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_mtu
short_description: Manages MTU settings on Nexus switch
description:
    - Manages MTU settings on Nexus switch
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - Either sysmtu param is required or interface AND mtu params are req'd
    - Absent unconfigures a given MTU if that value is currently present
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    interface:
        description:
            - Full name of interface, i.e. Ethernet1/1
        required: true
        default: null
        choices: []
        aliases: []
    mtu:
        description:
            - MTU for a specific interface
        required: false
        default: null
        choices: []
        aliases: []
    sysmtu:
        description:
            - System jumbo MTU
        required: false
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Specify desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# Ensure system mtu is 9126
- nxos_mtu: sysmtu=9216 host={{ inventory_hostname }}

# Config mtu on Eth1/1 (routed interface)
- nxos_mtu: interface=Ethernet1/1 mtu=1600 host={{ inventory_hostname }}

# Config mtu on Eth1/3 (switched interface)
- nxos_mtu: interface=Ethernet1/3 mtu=9216 host={{ inventory_hostname }}

# Unconfigure mtu on a given interface
- nxos_mtu: interface=Ethernet1/3 mtu=9216 host={{ inventory_hostname }} state=absent

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            mtu=dict(type='str'),
            interface=dict(type='str'),
            sysmtu=dict(type='str'),
            state=dict(choices=['absent', 'present'], default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    interface = module.params['interface']

    mtu = module.params['mtu']
    sysmtu = module.params['sysmtu']

    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    args = dict(mtu=mtu, sysmtu=sysmtu)
    proposed = {}
    for param, value in args.iteritems():
        if value:
            proposed[param] = value

    if sysmtu and (interface or mtu):
        module.fail_json(msg='Proper usage-- either just use the sysmtu param '
                         + 'or use interface AND mtu params')

    if not sysmtu and not (interface and mtu):
        module.fail_json(msg='To set the interface mtu size, you need both '
                         + 'params: interface && mtu.')

    if interface:
        interface = interface.lower()
        intf_type = nxapi_lib.get_interface_type(interface)
        if intf_type != 'ethernet':
            if nxapi_lib.is_default(device, interface) == 'DNE':
                module.fail_json(msg='Invalid interface.  It does not exist '
                                 + 'on the switch.')

        existing = nxapi_lib.get_mtu(device, interface)
    else:
        existing = nxapi_lib.get_system_mtu(device)

    if interface and mtu:
        if intf_type == 'loopback':
            module.fail_json(msg='Cannot set MTU for loopback interface.')
        mode = nxapi_lib.get_interface_mode(device, interface)
        if mode == 'layer2':
            if intf_type in ['ethernet', 'portchannel']:
                if mtu not in [existing['sysmtu'], '1500']:
                    module.fail_json(msg='MTU on L2 interfaces can only be set'
                                     + ' to the system default (1500) or '
                                     + 'existing sysmtu value which is '
                                     + ' %s' % existing['sysmtu'])
        elif mode == 'layer3':
            if intf_type in ['ethernet', 'portchannel', 'svi']:
                if (int(mtu) < 576 or int(mtu) > 9216) \
                        or ((int(mtu) % 2) != 0):
                    module.fail_json(msg='Invalid MTU for Layer 3 interface- '
                                     + 'needs to be an even number between 576'
                                     + ' and 9216')
    if sysmtu:
        if (int(sysmtu) < 576 or int(sysmtu) > 9216) \
                or ((int(sysmtu) % 2) != 0):
                    module.fail_json(msg='Invalid MTU- needs to be an even '
                                     + 'number between 576 and 9216')
    delta = set(proposed.iteritems()).difference(existing.iteritems())

    changed = False
    commands = []
    cmds = ''
    if state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if delta:
            command = nxapi_lib.get_commands_config_mtu(dict(delta), interface)
            commands.append(command)
    elif state == 'absent':
        common = set(proposed.iteritems()).intersection(existing.iteritems())
        if common:
            command = nxapi_lib.get_commands_remove_mtu(dict(common),
                                                        interface)
            commands.append(command)

    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
    if interface:
        interface = interface.lower()
        postrun = nxapi_lib.get_mtu(device, interface)
    else:
        postrun = nxapi_lib.get_system_mtu(device)
    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = postrun
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
