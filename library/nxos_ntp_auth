#!/usr/bin/python

# Copyright 2015 Michael Ben-Ami <michael@networktocode.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_ntp_auth
short_description: Manages NTP authentication
description:
    - Manages NTP authentication
author: Michael Ben-Ami
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - NTP authentication configuration changes are not idempotent.
      If state=present, the configuration will be updated on the device.
    - If state=absent, the moudle will attempt to remove the given key configuration.
      If a matching key configuration isn't found on the device, the module will fail.
    - If state=absent and authentication=on, authentication will be turned off.
    - If state=absent and authentication=off, authentication will be turned on.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    key_id:
        description:
            - Authentication key identifier (numeric)
        required: true
        default: null
        choices: []
        aliases: []
    md5string :
        description:
            - MD5 String
        required: true
        default: null
        choices: []
        aliases: []
    auth_type:
        description:
            - Whether the given md5string is in cleartext or has been encrypted.
              If in cleartext, the device will encrypt it before storing it.
        required: false
        default: 'text'
        choices: ['text', 'encrypt']
        aliases: []
    trusted_key:
        description:
            - Whether the given key is required to be supplied by a time source
            for the device to synchronize to the time source.
        required: false
        default: 'false'
        choices: ['true', 'false']
        aliases: []
    authentication:
        description:
            - Turns NTP authenication on or off.
        required: false
        default: null
        choices: ['on', 'off']
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''
# Basic NTP authentication configuration
- nxos_ntp_auth: key_id=32 md5string=hello auth_type=text host={{ inventory_hostname }}
'''

import socket

try:
    HAS_PYCSCO = True
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import ntp
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def main():
    module = AnsibleModule(
        argument_spec=dict(
            key_id=dict(required=True, type='str'),
            md5string=dict(required=True, type='str'),
            auth_type=dict(choices=['text', 'encrypt'], default='text'),
            trusted_key=dict(choices=['true', 'false'], default='false'),
            authentication=dict(choices=['on', 'off']),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    common_keys = ('state', 'host', 'username', 'password',
                   'protocol', 'CHECKMODE')

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])
    device = Device(ip=host, username=username,
                    password=password, protocol=protocol)
    changed = False

    proposed = dict((k, v) for k, v in module.params.iteritems()
                    if v is not None and k not in common_keys)
    commands = []

    key_id = proposed.get('key_id')
    md5string = proposed.get('md5string')
    auth_type = proposed.get('auth_type')
    trusted_key = proposed.get('trusted_key')
    authentication = proposed.get('authentication')

    try:
        existing = ntp.get_ntp_auth_info(device, key_id)
    except CLIError as e:
        module.fail_json(msg=str(e))

    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))
    if module.params['state'] == 'present':
        if delta:
            command = ntp.set_ntp_auth_key(
                key_id, md5string, auth_type, trusted_key, delta.get('authentication'))
            if command:
                commands.append(command)
    elif module.params['state'] == 'absent':
        if existing:
            auth_toggle = None
            if authentication == existing.get('authentication'):
                auth_toggle = authentication
            command = ntp.remove_ntp_auth_key(
                key_id, md5string, auth_type, trusted_key, auth_toggle)
            if command:
                commands.append(command)

    cmds = ''
    if commands:
        cmds = nxapi_lib.nested_cmd_list_to_string(commands)
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
            except CLIError as e:
                module.fail_json(msg=str(e) + ": " + cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = module.params['state']
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        results['final'] = ntp.get_ntp_auth_info(device, key_id)
    else:
        results['final'] = existing

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
