#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_pim_interface
short_description: Manages PIM interface configuration
description:
    - Manages PIM interface configuration settings
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - When state=default, supported params will be reset to a default state.
      These include: dr_prio, hello_auth_key, hello_interval, jp_policy_out,
      jp_policy_in, jp_type_in, jp_type_out, border, neighbor_policy,
      neighbor_type
    - the hello_auth_key param is not idempotent
    - hello_auth_key only supports clear text passwords
    - When state=absent, interface will be set to defaults and pim-sm
      will be disabled on the interface
    - PIM must be enabled on the device to use this module
    - This module is for Layer 3 interfaces
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    name:
        description:
            - Full name of the interface such as Ethernet1/33
        required: true
        default: null
        choices: []
        aliases: []
    sparse:
        description:
            - enable/disable sparse-mode on the interface
        required: true
        default: true
        choices: ['true', 'false']
        aliases: []
    hello_auth_key:
        description:
            - auth for hellos on this interface
        required: false
        default: null
        choices: []
        aliases: []
    hello_interval:
        description:
            - hello interval in SECONDS for this interface
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    jp_policy_out:
        description:
            - Policy for join-prune messages (outbound)
        required: true
        default: null
        choices: []
        aliases: []
    jp_policy_in:
        description:
            - Policy for join-prune messages (inbound)
        required: false
        default: null
        choices: []
        aliases: []
    jp_type_out:
        description:
            - Type of policy mapped to jp_policy_out
        required: false
        default: null
        choices: ['prefix', 'routemap']
        aliases: []
    jp_type_in:
        description:
            - Type of policy mapped to jp_policy_in
        required: true
        default: null
        choices: ['prefix', 'routemap']
        aliases: []
    border:
        description:
            - Configures interface to be a boundary of a PIM domain
        required: false
        default: null
        choices: ['true', 'false']
        aliases: []
    neighbor_policy:
        description:
            - Configures a neighbor policy for filtering adjacencies
        required: false
        default: null
        choices: []
        aliases: []
    neighbor_type:
        description:
            - Type of policy mapped to neighbor_policy
        required: false
        default: null
        choices: ['prefix', 'routemap']
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present', 'default']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

# ensure PIM is not running on the interface
- nxos_pim_interface: name=eth1/33 state=absent host={{ inventory_hostname }}

# ensure the interface has pim-sm enabled with the appropriate priority and hello interval
- nxos_pim_interface:  name=eth1/33 dr_prio=10 hello_interval=40 state=present host={{ inventory_hostname }}

# ensure join-prune policies exist
- nxos_pim_interface:  name=eth1/33 jp_policy_in=JPIN jp_policy_out=JPOUT jp_type_in=routemap jp_type_out=routemap host={{ inventory_hostname }}

# ensure defaults are in place
- nxos_pim_interface: name=eth1/33 state=default host={{ inventory_hostname }}

'''
import socket
import time

HAS_PYCSCO = True
try:
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import mcast
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False


def local_existing(gexisting):
    jp_bidir = False
    isauth = False
    if gexisting:
        jp_bidir = gexisting.get('jp_bidir')
        isauth = gexisting.get('isauth')
        if jp_bidir and isauth:
            gexisting.pop('jp_bidir')
            gexisting.pop('isauth')
        gexisting['sparse'] = True

    return gexisting, jp_bidir, isauth


def main():

    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            sparse=dict(choices=BOOLEANS,
                        type='bool', default=True),
            dr_prio=dict(),
            hello_auth_key=dict(),
            hello_interval=dict(type='int'),
            jp_policy_out=dict(),
            jp_policy_in=dict(),
            jp_type_out=dict(choices=['prefix', 'routemap']),
            jp_type_in=dict(choices=['prefix', 'routemap']),
            border=dict(choices=BOOLEANS, type='bool'),
            neighbor_policy=dict(),
            neighbor_type=dict(choices=['prefix', 'routemap']),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            state=dict(choices=['present', 'absent', 'default'],
                       default='present'),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    state = module.params['state']

    sparse = module.params['sparse']
    interface = module.params['name']
    jp_type_in = module.params['jp_type_in']
    jp_type_out = module.params['jp_type_out']
    jp_policy_in = module.params['jp_policy_in']
    jp_policy_out = module.params['jp_policy_out']
    neighbor_policy = module.params['neighbor_policy']
    neighbor_type = module.params['neighbor_type']
    hello_interval = module.params['hello_interval']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    if not nxapi_lib.feature_enabled(device, 'pim'):
        module.fail_json(msg='pim needs to be enabled first')

    if nxapi_lib.get_interface_mode(device, interface) == 'layer2':
        module.fail_json(msg='this module only works on Layer 3 interfaces')

    if jp_policy_in:
        if not jp_type_in:
            module.fail_json(msg='jp_type_in required when using jp_policy_in')
    if jp_policy_out:
        if not jp_type_out:
            module.fail_json(msg='jp_type_out required when using '
                             + ' jp_policy_out')
    if neighbor_policy:
        if not neighbor_type:
            module.fail_json(msg='neighbor_type required when using '
                             + 'neighbor_policy')

    get_existing = mcast.get_pim_interface(device, interface)
    existing, jp_bidir, isauth = local_existing(get_existing)

    changed = False

    commands = []

    OUT = ['CHECKMODE', 'host', 'password', 'username', 'state', 'protocol']

    args = dict((k, v) for k, v in module.params.iteritems() if k not in OUT)

    proposed = dict((param, value) for (param, value) in args.iteritems()
                    if value is not None)

    '''
    CANNOT_ABSENT = ['dr_prio', 'hello_interval',
                     'hello_auth_key', 'jp_policy_out', 'jp_policy_in',
                     'jp_type_out', 'jp_type_in', 'border', 'neighbor_type',
                     'neighbor_policy']
    '''

    if hello_interval:
        proposed['hello_interval'] = str(proposed['hello_interval'] * 1000)

    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))

    if state == 'present':
        # if not sparse:
        #    commands.append(['ip pim sparse-mode'])
        if delta:
            command = mcast.config_pim_interface(delta, existing,
                                                 jp_bidir, isauth)
            if command:
                commands.append(command)
    elif state == 'default':
        defaults = mcast.config_pim_interface_defaults(existing, jp_bidir,
                                                       isauth)
        if defaults:
            commands.append(defaults)

    elif state == 'absent':
        if existing.get('sparse') == True:
            delta['sparse'] = False
            # defaults is a list of commands
            defaults = mcast.config_pim_interface_defaults(existing, jp_bidir,
                                                           isauth)
            if defaults:
                commands.append(defaults)

            command = mcast.config_pim_interface(delta, existing,
                                                 jp_bidir, isauth)
            commands.append(command)

    cmds = ''
    if commands:
        commands.insert(0, ['interface ' + interface])
        cmds = nxapi_lib.nested_cmd_list_to_string(commands)
    results = {}

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
            except CLIError as e:
                module.fail_json(msg=str(e))

    results['proposed'] = proposed
    results['existing'] = existing
    results['commands'] = cmds
    results['changed'] = changed
    if changed:
        time.sleep(.5)
        get_existing = mcast.get_pim_interface(device, interface)
        existing, jp_bidir, isauth = local_existing(get_existing)
        results['final'] = existing
    else:
        results['final'] = existing

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
