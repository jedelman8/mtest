#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_ping
short_description: Tests reachability using ping from Nexus switch
description:
    - Tests reachability using ping from switch to a remote destination
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
    - xmltodict
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    dest:
        description:
            - IP address or hostname (resolvable by switch) of remote node
        required: true
        default: null
        choices: []
        aliases: []
    count:
        description:
            - Number of packets to send
        required: false
        default: 4
        choices: []
        aliases: []
    source:
        description:
            - Source IP Address
        required: false
        default: null
        choices: []
        aliases: []
    vrf:
        description:
            - Outgoing VRF
        required: false
        default: null
        choices: []
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''
# test reachability to 8.8.8.8 using mgmt vrf
- nxos_ping: dest=8.8.8.8 vrf=management host={{ inventory_hostname }}

# Test reachability to a few different public IPs using mgmt vrf
- nxos_ping: dest={{ item }} vrf=management host={{ inventory_hostname }}
  with_items:
    - 8.8.8.8
    - 4.4.4.4
    - 198.6.1.4

'''
try:
    import xmltodict
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def get_summary(results_list, ref_point):
    summ_string = results_list[ref_point+1]
    summ_list = summ_string.split(',')
    pkts_tx = summ_list[0].split('packets')[0].strip()
    pkts_rx = summ_list[1].split('packets')[0].strip()
    pkt_loss = summ_list[2].split('packet')[0].strip()
    summary = dict(packets_tx=pkts_tx,
                   packets_rx=pkts_rx,
                   packet_loss=pkt_loss)

    return summary


def get_rtt(results_list, packet_loss, location):
    if packet_loss != '100.00%':
        rtt_string = results_list[location]
        base = rtt_string.split('=')[1]
        rtt_list = base.split('/')
        min_rtt = rtt_list[0].lstrip()
        avg_rtt = rtt_list[1]
        max_rtt = rtt_list[2][:-3]
        rtt = dict(min=min_rtt, avg=avg_rtt, max=max_rtt)
    else:
        rtt = dict(min=None, avg=None, max=None)

    return rtt


def get_statistics_summary_line(response_as_list):

    for each in response_as_list:
        if '---' in each:
            index = response_as_list.index(each)
    return index


def main():

    module = AnsibleModule(
        argument_spec=dict(
            dest=dict(required=True),
            count=dict(default=4),
            vrf=dict(),
            source=dict(),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=False
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    dest = module.params['dest']
    count = module.params['count']
    vrf = module.params['vrf']
    source = module.params['source']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    OPTIONS = {
        'vrf': vrf,
        'count': count,
        'source': source
        }

    ping_string = 'ping ' + dest

    for command, arg in OPTIONS.iteritems():
        if arg:
            ping_string += ' {} {}'.format(command, arg)

    ping_results = device.show(ping_string, text=True)
    ping_d = xmltodict.parse(ping_results[1])
    ping = ping_d['ins_api']['outputs']['output']['body']

    # convert ascii results to a list
    ping_results_list = ping.split('\n')

    # --- 8.8.8.99 ping statistics --- this line is being used as a point
    # of reference
    ref_point = get_statistics_summary_line(ping_results_list)

    results = {}
    results['command'] = ping_string
    results['action'] = ping_results_list[0]
    results['dest'] = dest
    # results['text_response'] = ping_results_list[1:ref_point-1]
    results['count'] = count
    results['summary'] = get_summary(ping_results_list, ref_point)
    results['rtt'] = get_rtt(ping_results_list,
                             results['summary']['packet_loss'],
                             ref_point+2)

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
