#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_snmp_community
short_description: Manages SNMP community configs
description:
    - Manages SNMP community configuration
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    community:
        description:
            - Case-sensitive community string
        required: true
        default: null
        choices: []
        aliases: []
    access:
        description:
            - Access type for community
        required: false
        default: null
        choices: ['ro','rw']
        aliases: []
    group:
        description:
            - Group to which the community belongs
        required: false
        default: null
        choices: []
        aliases: []
    acl:
        description:
            - acl name to filter snmp requests
        required: false
        default: 1
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import snmp
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            community=dict(required=True, type='str'),
            access=dict(choices=['ro', 'rw']),
            group=dict(type='str'),
            acl=dict(type='str'),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    access = module.params['access']
    group = module.params['group']
    community = module.params['community']
    acl = module.params['acl']
    state = module.params['state']

    if access is None and group is None:
        module.fail_json(msg='one of the params: access or group is required')

    if access and group:
        module.fail_json(msg='please only use one of the params: access'
                         + ' or group in a given task')

    if access:
        if access == 'ro':
            group = 'network-operator'
        elif access == 'rw':
            group = 'network-admin'

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    # group check - ensure group being configured exists on the device

    configured_groups = snmp.get_snmp_groups(device)

    if group not in configured_groups:
        module.fail_json(msg='group not on switch.'
                         + 'please add before moving forward')

    existing = snmp.get_snmp_community(device, community)

    args = dict(group=group, acl=acl)

    proposed = {}
    for k, v in args.iteritems():
        if v:
            proposed[k] = v

    delta = set(proposed.iteritems()).difference(existing.iteritems())

    changed = False

    commands = []

    if state == 'absent':
        if existing:
            command = snmp.remove_snmp_community(community)
            commands.append(command)
    elif state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        command = snmp.config_snmp_community(dict(delta), community)
        commands.append(command)

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
            results['new'] = snmp.get_snmp_community(device, community)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
