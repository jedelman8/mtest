#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_snmp_host
short_description: Manages SNMP host configuration
description:
    - Manages SNMP host configuration parameters
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - state=absent removes the host configuration if it is configured
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    snmp_host:
        description:
            - IP address of hostname of target host
        required: true
        default: null
        choices: []
        aliases: []
    version:
        description:
            - SNMP version
        required: false
        default: v2c
        choices: ['v2c', 'v3']
        aliases: []
    community:
        description:
            - Community string or v3 username
        required: false
        default: null
        choices: []
        aliases: []
    udp:
        description:
            - UDP port number (0-65535)
        required: false
        default: null
        choices: []
        aliases: []
    type:
        description:
            - type of message to send to host
        required: false
        default: traps
        choices: ['trap', 'inform']
        aliases: []
    vrf:
        description:
            - VRF to use to source traffic to source
        required: false
        default: null
        choices: []
        aliases: []
    vrf_filter:
        description:
            - Name of VRF to filter
        required: false
        default: null
        choices: []
        aliases: []
    src_intf:
        description:
            - Source interface
        required: false
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import snmp
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            snmp_host=dict(required=True, type='str'),
            community=dict(type='str'),
            udp=dict(type='str'),
            version=dict(choices=['v2c', 'v3'],
                         default='v2c'),
            src_intf=dict(type='str'),
            v3=dict(choices=['noauth', 'auth', 'priv']),
            vrf_filter=dict(type='str'),
            vrf=dict(type='str'),
            type=dict(choices=['trap', 'inform'],
                      default='trap'),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    snmp_host = module.params['snmp_host']
    community = module.params['community']
    udp = module.params['udp']
    version = module.params['version']
    src_intf = module.params['src_intf']
    v3 = module.params['v3']
    vrf_filter = module.params['vrf_filter']
    vrf = module.params['vrf']
    type1 = module.params['type']

    state = module.params['state']

    if type1 == 'inform' and version != 'v3':
        module.fail_json(msg='inform requires snmp v3')

    if version == 'v2c' and v3:
        module.fail_json(msg='param: "v3" should not be used when '
                         + 'using version v2c')

    if not any([vrf_filter, vrf, udp, src_intf]):
        if not all([type1, version, community]):
            module.fail_json(msg='when not configuring options like '
                             + 'vrf_filter, vrf, udp, and src_intf,\n'
                             + 'the following params are required: '
                             + 'type, version, community')

    if version == 'v3' and v3 is None:
        module.fail_json(msg='when using version=v3, the param v3 '
                         + '(options: auth,\n noauth, priv) is also required')

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    existing = snmp.get_snmp_host(device, snmp_host)

    # existing returns the list of vrfs configured for a given host
    # checking to see if the proposed is in the list
    store = existing.get('vrf_filter', None)
    if existing and store:
        if vrf_filter not in existing['vrf_filter']:
            existing['vrf_filter'] = None
        else:
            existing['vrf_filter'] = vrf_filter

    proposed = {}
    for k, v in module.params.iteritems():
        if k not in ['host', 'username', 'password',
                     'protocol', 'state'] and v:
            proposed[k] = v

    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))

    changed = False

    commands = []

    if state == 'absent':
        if existing:
            command = snmp.remove_snmp_host(snmp_host, existing)
            commands.append(command)
    elif state == 'present':
        if delta:
            command = snmp.config_snmp_host(delta, proposed, existing)
            commands.append(command)

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
            results['new'] = snmp.get_snmp_host(device, snmp_host)

    if store:
        existing['vrf_filter'] = store

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
