#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_snmp_trap
short_description: Manages SNMP traps
description:
    - Manages SNMP traps configurations
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - This module works at the group level for traps.  If you need to only
      enable/disable 1 specific trap within a group, use the nxos_command
      module.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    group:
        description:
            - location information
        required: true
        default: null
        choices: ['aaa', 'bridge', 'callhome', 'cfs', 'config', 'entity',
          'feature-control', 'hsrp', 'license', 'link', 'lldp', 'ospf', 'rf',
          'rmon', 'snmp', 'storm-control', 'stpx', 'sysmgr', 'system',
          'upgrade', 'vtp', 'all']
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['enabled','disabled']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import snmp
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            state=dict(choices=['enabled', 'disabled'], required=True),
            group=dict(choices=['aaa', 'bridge', 'callhome', 'cfs', 'config',
                                'entity', 'feature-control', 'hsrp',
                                'license', 'link', 'lldp', 'ospf', 'rf',
                                'rmon', 'snmp', 'storm-control', 'stpx',
                                'sysmgr', 'system', 'upgrade', 'vtp', 'all'],
                       required=True),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    group = module.params['group']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    existing = snmp.get_snmp_traps(device, group)

    status = []
    enabled = False
    disabled = False

    for each in existing:
        check = each['enabled']
        status.append(check)
        if 'yes' == check.lower():
            enabled = True
        if 'no' == check.lower():
            disabled = True

    changed = False

    commands = []

    if state == 'disabled':
        if enabled:
            commands.append(['no snmp-server enable traps ' + group])
    elif state == 'enabled':
        if disabled:
            commands.append(['snmp-server enable traps ' + group])

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
            results['new'] = snmp.get_snmp_traps(device, group)

    results = {}
    results['proposed'] = group
    results['existing'] = existing
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
