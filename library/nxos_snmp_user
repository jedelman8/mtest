#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_snmp_user
short_description: Manages SNMP users for monitoring
description:
    - Manages SNMP user configuration
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    user:
        description:
            - name of the user
        required: true
        default: null
        choices: []
        aliases: []
    group:
        description:
            - Group to which the user will belong to
        required: false
        default: null
        choices: []
        aliases: []
    auth:
        description:
            - Auth parameters for the user
        required: false
        default: null
        choices: ['md5', 'sha']
        aliases: []
    pwd:
        description:
            - auth password when using md5 or sha
        required: false
        default: null
        choices: []
        aliases: []
    privacy:
        description:
            - prviacy password for the user
        required: false
        default: null
        choices: []
        aliases: []
    encrypt:
        description:
            - enables aes-128 bit encryption when using privacy pw
        required: false
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import snmp
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            user=dict(required=True, type='str'),
            group=dict(type='str', required=True),
            pwd=dict(type='str'),
            privacy=dict(type='str'),
            auth=dict(choices=['md5', 'sha']),
            encrypt=dict(choices=BOOLEANS, type='bool'),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    user = module.params['user']
    pwd = module.params['pwd']
    group = module.params['group']
    pwd = module.params['pwd']
    privacy = module.params['privacy']
    encrypt = module.params['encrypt']
    authentication = module.params['auth']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    if authentication and pwd is None:
        module.fail_json(msg='pwd is required when auth is set')

    if encrypt and privacy is None:
        module.fail_json(msg='privacy pwd is required when trying to encrypt')

    if group and group not in snmp.get_snmp_groups(device):
        module.fail_json(msg='group not configured yet on switch')

    existing = snmp.get_snmp_user(device, user)

    # existing returns the list of groups configured for a given user
    # checking to see if the proposed is in the list
    store = existing.get('group', None)
    if existing:
        if group not in existing['group']:
            existing['group'] = None
        else:
            existing['group'] = group

    changed = False

    commands = []

    proposed = {}

    if state == 'absent':
        if existing:
            command = snmp.remove_snmp_user(user)
            commands.append(command)
    elif state == 'present':
        new = False
        reset = False

        if not existing:
            args = dict(pwd=pwd, privacy=privacy, group=group,
                        authentication=authentication, encrypt=encrypt)

            for key, value in args.iteritems():
                if value:
                    proposed[key] = value

            if encrypt:
                proposed['encrypt'] = 'aes-128'

            command = snmp.config_snmp_user(proposed, user, reset, new)
            commands.append(command)

        elif existing:
            # if any of these parameters are not null, a change will be req'd
            # since passwords are not idempotent
            # pwd, privacy

            if pwd:
                proposed['pwd'] = pwd
            if privacy:
                proposed['privacy'] = privacy

            # required param
            proposed['group'] = group

            if authentication:
                proposed['authentication'] = authentication

            if encrypt and not existing['encrypt'].startswith('aes'):
                reset = True
                proposed['encrypt'] = 'aes-128'

            elif encrypt:
                proposed['encrypt'] = 'aes-128'

            delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))

            if delta:
                delta['group'] = group

            command = snmp.config_snmp_user(delta, user, reset, new)
            commands.append(command)

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)
    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)
            results['new'] = snmp.get_snmp_user(device, user)

    if store:
        existing['group'] = store

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
