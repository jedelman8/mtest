#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_switchport
short_description: Manages Layer 2 switchport interfaces
description:
    - Manages Layer 2 interfaces
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - Interface must be a Layer2 port already.  If not, convert to L2 with
      nxos_interface module
    - When state=absent, if the switchport does not have a default config,
      it is set back to a default config from a vlan configuration perspective.
      This means, if state=absent, the resulting interface config will be an
      access port with vlan 1 configured as an access vlan even if the existing
      config is a trunk port.
    - Access and Native VLANs are required to exist on the switch before
      configuring them with this module
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    interface:
        description:
            - Full name of the interface, i.e. Ethernet1/1
        required: true
        default: null
        choices: []
        aliases: []
    mode:
        description:
            - Mode for the Layer 2 port
        required: true
        default: null
        choices: ['access','trunk']
        aliases: []
    access_vlan:
        description:
            - if mode=access, used as the access vlan id
        required: false
        default: 1
        choices: []
        aliases: []
    native_vlan:
        description:
            - if mode=trunk, used as the trunk native vlan id
        required: false
        default: 1
        choices: []
        aliases: []
    trunk_vlans:
        description:
            - if mode=trunk, used as the vlan range to carry over trunk
        required: false
        default: '1-4094'
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: null
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# Config a switchport to be a trunk interface with native vlan 10 and carriers vlan 2-100
- nxos_switchport: interface=Ethernet1/1 mode=trunk native_vlan=10 trunk_vlans=2-100 host={{ inventory_hostname }}

# Config a switchport to an access port on vlan 20
- nxos_switchport: interface=Ethernet1/2 mode=access access_vlan=20 host={{ inventory_hostname }}

# Remove existing access port vlan configuration on a switchport (mode is required)
- nxos_switchport: interface=Ethernet1/2 host={{ inventory_hostname }} mode=access state=absent

# Remove existing trunk port vlan configuration on a switchport (mode is required)
- nxos_switchport: interface=Ethernet1/1 host={{ inventory_hostname }} mode=trunk state=absent
'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            interface=dict(required=True, type='str'),
            mode=dict(required=True, choices=['access', 'trunk']),
            access_vlan=dict(type='str', default='1'),
            native_vlan=dict(type='str', default='1'),
            trunk_vlans=dict(type='str', default='1-4094'),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(),
            password=dict(),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    interface = module.params['interface']
    mode = module.params['mode']
    access_vlan = module.params['access_vlan']
    state = module.params['state']
    trunk_vlans = module.params['trunk_vlans']
    native_vlan = module.params['native_vlan']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    args = dict(interface=interface, mode=mode, access_vlan=access_vlan,
                native_vlan=native_vlan, trunk_vlans=trunk_vlans)

    interface = interface.lower()

    if mode == 'access':
        # Requring the user to configure an access_vlan if configuring an
        # access port
        # even if they want the default VLAN 1
        if not access_vlan and state == 'present':
            module.fail_json(msg='access_vlan param is required when '
                             + 'mode=access && state=present')

    current_mode = nxapi_lib.get_interface_mode(device, interface)

    # Current mode will return layer3, layer2, or unknown
    if current_mode == 'unknown' or current_mode == 'layer3':
        module.fail_json(msg='Ensure interface is configured to be a L2 port '
                         + 'first before using this module.')

    # existing will never be null for Ethernet interface as there is always a
    # default vlan config
    existing = nxapi_lib.get_switchport(device, interface)

    # Safeguard check to ensure the user knows what the current state of the
    # interface is when they are trying to remove a config.  Requires user to
    # know if the port is currently an access port or trunk port before
    # removing the config
    if not existing:
        module.fail_json(msg='Make sure you are using the FULL interface name')

    if (existing['mode'] != args['mode']) and state == 'absent':
        module.fail_json(msg='You are trying to remove: '
                         + '{} port config, but the '.format(args['mode'])
                         + 'port is: {} config.'.format(existing['mode'])
                         + ' Get your act together.')

    current_vlans = nxapi_lib.get_list_of_vlans(device)

    if mode == 'access':
        args.pop('native_vlan')
        args.pop('trunk_vlans')
        if state == 'absent':
            # only removing if state = 'absent' because these are used for
            # config clean up if state == present
            existing.pop('native_vlan')
            existing.pop('trunk_vlans')
        if access_vlan not in current_vlans:
            module.fail_json(msg='You are trying to config or remove a VLAN '
                             + 'on an interface that does not exist on the '
                             + 'switch yet!', vlan=access_vlan)

    elif mode == 'trunk':
        args.pop('access_vlan')
        if state == 'absent':
            # only removing if state = 'absent' because these are used for
            # config clean up if state == present
            existing.pop('access_vlan')
        if native_vlan not in current_vlans:
            module.fail_json(msg='Your native vlan does not exist yet on the '
                             + 'switch yet. Add it first, please.',
                             vlan=native_vlan)

        trunk_vlans_list = nxapi_lib.vlan_range_to_list(trunk_vlans)
        trunk_vlans_list.sort()

    if trunk_vlans and mode == 'trunk':
        # expanding the trunk_vlans into a list
        existing_trunks_list = nxapi_lib.vlan_range_to_list(
            (existing['trunk_vlans'])
            )
        existing_trunks_list.sort()
        if trunk_vlans_list == existing_trunks_list:
            args['trunk_vlans'] = existing['trunk_vlans']

    proposed = {}
    changed = False

    for param, value in args.iteritems():
        if value:
            # cleaning up proposed after popping unneeded k/v pairs
            proposed[param] = value

    commands = []

    if state == 'absent':
        if not nxapi_lib.is_switchport_default(existing):
            command = nxapi_lib.remove_switchport_config(device,
                                                         existing,
                                                         interface)
            commands.append(command)
        elif nxapi_lib.is_switchport_default(existing) and mode == 'trunk':
            command = ['interface ' + interface, 'no switchport mode trunk']
            commands.append(command)
    elif state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if existing:
            if delta:
                if nxapi_lib.interface_is_portchannel(device, interface):
                    module.fail_json(msg='Cannot change L2 config on physical '
                                     + 'port because it is in a portchannel. '
                                     + 'You should update portchannel config.')
                command = nxapi_lib.get_switchport_config_commands(device,
                                                                   delta,
                                                                   interface)
                commands.append(command)
            command = nxapi_lib.clean_up_interface_vlan_configs(proposed,
                                                                existing)
            if command:
                commands.append(command)

    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_switchport(device, interface)
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
