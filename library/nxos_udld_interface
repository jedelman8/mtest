#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: nxos_udld_interface
short_description: Manages UDLD interface configuration params
description:
    - Manages UDLD interface configuration params
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - When state=absent, it unconfigures existing setings if
      they already exist on the switch.  It is much cleaner to use
      state=present for all options.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    mode:
        description:
            - Manages udld mode for an interface
        required: true
        default: null
        choices: ['enabled','disabled','aggressive']
        aliases: []
    interface:
        description:
            - FULL name of the interface, i.e. Ethernet1/1
        required: true
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# ensure Ethernet1/1 is configured to be in aggressive mode
- nxos_udld_interface: interface=Ethernet1/1 mode=aggressive state=present host={{ inventory_hostname }}

# Remove the aggressive config only if it's currently in aggressive mode and then disable udld (switch default)
- nxos_udld_interface: interface=Ethernet1/1 mode=aggressive state=absent host={{ inventory_hostname }}

# ensure Ethernet1/1 has aggressive mode enabled
- nxos_udld_interface: interface=Ethernet1/1 mode=enabled host={{ inventory_hostname }}

# ensure Ethernet1/1 has aggressive mode disabled

'''
try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            mode=dict(choices=['enabled', 'disabled', 'aggressive'],
                      required=True),
            interface=dict(type='str'),
            state=dict(choices=['absent', 'present'], default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    interface = module.params['interface'].lower()
    mode = module.params['mode']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    proposed = dict(mode=mode)
    if not nxapi_lib.feature_enabled(device, 'udld'):
        module.fail_json(msg='UDLD feature needs to be enabled first')

    existing = nxapi_lib.get_udld_interface(device, interface)

    delta = set(proposed.iteritems()).difference(existing.iteritems())

    changed = False
    commands = []
    if state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if delta:
            command = nxapi_lib.get_commands_config_udld_interface(dict(delta),
                                                                   interface,
                                                                   device,
                                                                   existing)
            commands.append(command)
    elif state == 'absent':
        common = set(proposed.iteritems()).intersection(existing.iteritems())
        if common:
            command = nxapi_lib.get_commands_remove_udld_interface(
                dict(common), interface, device, existing
                )
            commands.append(command)
    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_udld_interface(device, interface)
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
