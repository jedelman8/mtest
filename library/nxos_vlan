#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: nxos_vlan
short_description: Manages VLAN resources and attributes
description:
    - Manages VLAN configurations on NX-API enabled switches
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    vlan_id:
        description:
            - vlan id or range of VLANs
        required: true
        default: null
        choices: []
        aliases: []
    name:
        description:
            - name of VLAN (not supported when using range of VLANs)
        required: false
        default: null
        choices: []
        aliases: []
    vlan_state:
        description:
            - Manage the vlan oper state of the VLAN (equiv to state {active | suspend} command
        required: false
        default: active
        choices: ['active','suspend']
        aliases: []
    admin_state:
        description:
            - Manage the vlan admin state of the VLAN (equiv to shut/no shut in vlan config mode
        required: false
        default: up
        choices: ['up','down']
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# Ensure VLAN 50 exists with the name WEB and is in the shutdown state
 - nxos_vlan: vlan_id=50 host={{ inventory_hostname }} admin_state=down name=WEB

# Ensure VLAN is NOT on the device
- nxos_vlan: vlan_id=50 host={{ inventory_hostname }} state=absent

# Ensure a range of VLANs are present on the switch
- nxos_vlan: vlan_id="2-10,20,50,55-60" host={{ inventory_hostname }} state=present

# Ensure a group of VLANs are present with the given names
- nxos_vlan: vlan_id={{ item.vlan_id }} name={{ item.name }} host={{ inventory_hostname }} state=present
  with_items:
    - vlan_id: 10
      name: web
    - vlan_id: 20
      name: app
    - { vlan_id: 30, name: db }
    - vlan_id: 40
      name: misc
    - vlan_id: 99
      name: native_vlan
'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            vlan_id=dict(required=True, type='str'),
            name=dict(default=None),
            vlan_state=dict(choices=['active', 'suspend'], default='active'),
            state=dict(choices=['present', 'absent'], default='present'),
            admin_state=dict(choices=['up', 'down'], default='up'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    vlan_id = module.params['vlan_id']
    name = module.params['name']
    vlan_state = module.params['vlan_state']
    admin_state = module.params['admin_state']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    changed = False
    proposed = dict(vlan_id=vlan_id, name=name, vlan_state=vlan_state,
                    admin_state=admin_state)

    proposed_vlans_list = nxapi_lib.vlan_range_to_list(vlan_id)
    proposed_vlans_list.sort()
    existing_vlans_list = nxapi_lib.get_list_of_vlans(device)
    existing_vlans_list.sort()

    # These are all of the VLANs being proposed that don't already exist
    # on the switch
    vlans_delta = set(proposed_vlans_list).difference(existing_vlans_list)

    # VLANs that are common between what is being proposed and what is on
    # the switch
    vlans_common = set(proposed_vlans_list).intersection(existing_vlans_list)

    if state == 'absent' and (vlan_id == '1' or '1' in vlans_common):
        module.fail_json(msg="You cannot remove VLAN 1.  Doh!!")

    if len(proposed_vlans_list) > 1:
        if state == 'present':
            my_vlans = list(vlans_delta)

            name_param = proposed.get('name', None)
            if name_param and vlans_delta:
                module.fail_json(msg="You cannot set the name for multiple "
                                 + "VLANs. Remove the name parameter from "
                                 + "being used.")
        elif state == 'absent':
            my_vlans = list(vlans_common)
    else:
        my_vlans = proposed_vlans_list

    # my_vlans holds the VLANs that will be manipulated in some way

    final_existing = {}
    final_proposed = {}
    final_commands = {}
    final_postrun = {}

    for vlan in my_vlans:

        existing = nxapi_lib.get_vlan(device, vlan)
        delta = set()
        commands = []

        if state == 'absent':
            if existing:
                command = nxapi_lib.get_remove_vlan_commands(device, vlan)
                commands.append(command)

        elif state == 'present':
            if int(vlan) > 1005 and admin_state == 'down':
                module.fail_json(msg='You cannot shutdown VLANs > 1005')
            proposed = dict(vlan_id=vlan,
                            vlan_state=vlan_state,
                            admin_state=admin_state,
                            name=name)
            delta = set(proposed.iteritems()).difference(existing.iteritems())
            if delta:
                command = nxapi_lib.get_vlan_config_commands(device,
                                                             delta,
                                                             vlan)
                commands.append(command)

        cmds = ''
        if commands:
            for each in commands:
                cmds = nxapi_lib.cmd_list_to_string(each)
            final_commands[vlan] = cmds

        final_existing[vlan] = existing
        final_proposed[vlan] = dict(vlan_id=vlan,
                                    vlan_state=vlan_state,
                                    admin_state=admin_state)

    if final_commands:
        if module.check_mode:
            module.exit_json(changed=True, commands=final_commands)
        else:
            for vlan, commands in final_commands.iteritems():
                device.config(commands)
                changed = True
            for vlan in my_vlans:
                final_postrun[vlan] = nxapi_lib.get_vlan(device, vlan)

    results = {}
    results['proposed'] = proposed
    results['existing'] = final_existing
    results['new'] = final_postrun
    results['state'] = state
    results['commands'] = final_commands
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
