#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: nxos_vpc
short_description: Manages global VPC configuration
description:
    - Manages global VPC configuration
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - The feature vpc must be enabled before this module can be used
    - If not using management vrf, vrf must be globally on the device
      before using in the pkl config
    - Although source IP isn't required on the command line it is
      required when using this module.  The PKL VRF must also be configured
      prior to using this module.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    domain:
        description:
            - VPC domain
        required: true
        default: null
        choices: []
        aliases: []
    role_priority:
        description:
            - Role priority for device. Remember lower is better.
        required: false
        default: null
        choices: []
        aliases: []
    system_priority:
        description:
            - System priority device.  Remember they must match between peers.
        required: false
        default: null
        choices: []
        aliases: []
    pkl_src:
        description:
            - Source IP address used for peer keepalive link
        required: false
        default: null
        choices: []
        aliases: []
    pkl_dest:
        description:
            - Destination (remote) IP address used for peer keepalive link
        required: false
        default: null
        choices: []
        aliases: []
    pkl_vrf:
        description:
            - VRF used for peer keepalive link
        required: false
        default: management
        choices: []
        aliases: []
    peer_gw:
        description:
            - Enables/Disables peer gateway
        required: false
        default: null
        choices: ['true','false']
        aliases: []
    auto_recovery:
        description:
            - Enables/Disables auto recovery
        required: false
        default: null
        choices: ['true','false']
        aliases: []
    delay_restore:
        description:
            - manages delay restore command and config value in seconds
        required: false
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# ensure vpc domain 100 is configured
- nxos_vpc: domain=100 role_priority=1000 system_priority=2000 pkl_src=192.168.100.1 pkl_dest=192.168.100.2 host={{ inventory_hostname }}

# ensure peer gateway is enabled for vpc domain 100
- nxos_vpc: domain=100 peer_gw=true host={{ inventory_hostname }}

# ensure vpc domain does not exist on switch
- nxos_vpc: domain=100 host={{ inventory_hostname }} state=absent
'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            domain=dict(required=True, type='str'),
            role_priority=dict(type='str'),
            system_priority=dict(type='str'),
            pkl_src=dict(),
            pkl_dest=dict(),
            pkl_vrf=dict(default='management'),
            peer_gw=dict(choices=BOOLEANS, type='bool'),
            auto_recovery=dict(choices=BOOLEANS, type='bool'),
            delay_restore=dict(type='str'),
            state=dict(choices=['absent', 'present'], default='present'),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    domain = module.params['domain']
    role_priority = module.params['role_priority']
    system_priority = module.params['system_priority']
    pkl_src = module.params['pkl_src']
    pkl_dest = module.params['pkl_dest']
    pkl_vrf = module.params['pkl_vrf']
    peer_gw = module.params['peer_gw']
    auto_recovery = module.params['auto_recovery']
    delay_restore = module.params['delay_restore']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    changed = False

    args = dict(domain=domain, role_priority=role_priority,
                system_priority=system_priority, pkl_src=pkl_src,
                pkl_dest=pkl_dest, pkl_vrf=pkl_vrf, peer_gw=peer_gw,
                auto_recovery=auto_recovery,
                delay_restore=delay_restore)

    # At this time, requiring pkl_src AND pkl_dest to be set
    # VRF is set by default as 'management'- in reality, this is just checking
    # on pkl_src and pkl_dest
    if not (pkl_src and pkl_dest and pkl_vrf):
        # if only the source or dest is set, it'll fail and ask to set the
        # other
        if pkl_src or pkl_dest:
            module.fail_json(msg='source AND dest IP for pkl are required at '
                             + 'this time (although source is technically not '
                             + ' required by the device.)')

        # These params are removed if only the source and dest are not set
        # If that occurs, the VRF is also removed such that nothing changes
        # on the peer keepalive link
        # Then the only changes will be for rp, sp, peergw, ar, delay_restore,
        # etc.

        # module.fail_json(msg='When you are using the pkl_vrf param, you should'
        #                 + ' really also set the source and dest IPs of the '
        #                 + 'peer keepalive link)')
        args.pop('pkl_src')
        args.pop('pkl_dest')
        args.pop('pkl_vrf')

    if not nxapi_lib.feature_enabled(device, 'vpc'):
        module.fail_json(msg='VPC feature needs to be enabled first')

    if pkl_vrf:
        if pkl_vrf.lower() not in nxapi_lib.get_vrf_list(device):
            module.fail_json(msg='The VRF you are trying to use for the peer '
                             + 'keepalive link is not on device yet. Add it '
                             + 'first, please.')

    proposed = {}
    for param, value in args.iteritems():
        if value is not None:
            proposed[param] = value

    existing = nxapi_lib.get_vpc(device)

    commands = []
    if state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        command = nxapi_lib.get_commands_to_config_vpc(delta, domain, existing)
        commands.append(command)
    elif state == 'absent':
        if existing:
            if domain != existing['domain']:
                module.fail_json(msg="You are trying to remove a domain that "
                                 + "does not exist on the device")
            else:
                command = nxapi_lib.get_commands_to_remove_vpc(domain)
                commands.append(command)
    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_vpc(device)
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
