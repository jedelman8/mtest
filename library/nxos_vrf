#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: nxos_vrf
short_description: Manages global VRF configuration
description:
    - Manages global VRF configuration
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    vrf:
        description:
            - Name of VRF to be managed
        required: true
        default: null
        choices: []
        aliases: []
    admin_state:
        description:
            - Administrative state of the VRF
        required: false
        default: up
        choices: ['up','down']
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    description:
        description:
            - Description of the VRF
        required: false
        default: null
        choices: []
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# ensure yankees VRF exists on switch
- nxos_vrf: vrf=yankees host={{ inventory_hostname }}

# ensure yankees VRF does not exist on switch
- nxos_vrf: vrf=yankees host={{ inventory_hostname }} state=absent
'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            vrf=dict(required=True),
            admin_state=dict(default='up', choices=['up', 'down']),
            state=dict(default='present', choices=['present', 'absent']),
            description=dict(default=None),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    vrf = module.params['vrf']
    admin_state = module.params['admin_state']
    description = module.params['description']
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)

    changed = False

    args = dict(vrf=vrf, description=description, admin_state=admin_state)

    if vrf.lower() == 'default':
        module.fail_json(msg='cannot use default as name of a VRF')

    proposed = {}
    for param, value in args.iteritems():
        if value:
            proposed[param] = value

    existing = nxapi_lib.get_vrf(device, vrf)

    # this code block is making sure the user input vrf
    # is in the right case before moving forward
    if existing:
        existing_vrf = existing.get('vrf', None)
        if existing_vrf:
            if existing_vrf.lower() == vrf.lower():
                proposed['vrf'] == existing['vrf']

    commands = []
    if state == 'absent':
        if existing:
            command = nxapi_lib.get_commands_to_remove_vrf(vrf)
            commands.append(command)

    elif state == 'present':
        delta = set(proposed.iteritems()).difference(existing.iteritems())
        if not existing:
            command = nxapi_lib.get_commands_to_config_vrf(delta, vrf)
            commands.append(command)
        elif delta:
            check_delta = dict(delta)
            # vrf should NOT be in this set/dict if it already exists
            # however, due to case sensitivity, this is being used as a check
            # can't just change case because it's case is needed within
            # methods in
            # the lib
            if 'vrf' not in check_delta.keys():
                command = nxapi_lib.get_commands_to_config_vrf(delta, vrf)
                commands.append(command)
    cmds = ''
    if commands:
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = nxapi_lib.get_vrf(device, vrf)
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
