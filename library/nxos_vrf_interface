#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jedelman8@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: nxos_vrf_interface
short_description: Manages interface specific VRF configuration
description:
    - Manages interface specific VRF configuration
author: Jason Edelman (@jedelman8)
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - VRF needs to be added globally with nxos_vrf before
      adding a VRF to an interface
    - Remove a VRF from an interface will still remove
      all L3 attributes just as it does from CLI
    - VRF is not read from an interface until IP address is
      configured on that interface
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    vrf:
        description:
            - Name of VRF to be managed
        required: true
        default: null
        choices: []
        aliases: []
    interface:
        description:
            - Full name of interface to be managed, i.e. Ethernet1/1
        required: true
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manages desired state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http', 'https']
        aliases: []
'''
EXAMPLES = '''
# ensure vrf yankees exists on Eth1/1
- nxos_vrf_interface: vrf=yankees interface=Ethernet1/1 host={{ inventory_hostname }} state=present

# ensure yankees VRF does not exist on Eth1/1
- nxos_vrf_interface: vrf=yankees interface=Ethernet1/1 host={{ inventory_hostname }} state=absent
'''

try:
    import socket
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import nxapi_lib
except ImportError as e:
    print '*' * 30
    print e
    print '*' * 30


def main():

    module = AnsibleModule(
        argument_spec=dict(
            vrf=dict(required=True),
            interface=dict(type='str'),
            state=dict(default='present', choices=['present', 'absent']),
            protocol=dict(choices=['http', 'https'], default='http'),
            host=dict(required=True),
            username=dict(type='str'),
            password=dict(type='str'),
        ),
        supports_check_mode=True
    )

    auth = Auth(vendor='cisco', model='nexus')
    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password
    protocol = module.params['protocol']

    host = socket.gethostbyname(module.params['host'])

    vrf = module.params['vrf'].lower()
    interface = module.params['interface'].lower()
    state = module.params['state']

    device = Device(ip=host, username=username, password=password,
                    protocol=protocol)
    changed = False

    intf_type = nxapi_lib.get_interface_type(interface)

    if intf_type == 'ethernet':
        mode = nxapi_lib.get_interface_mode(device, interface)
        if mode == 'layer2':
            module.fail_json(msg='Ensure interface is a Layer 3 port before'
                             + 'configuring a VRF on an interface.  You can '
                             + ' use nxapi_interface')

    if intf_type != 'ethernet' \
            and nxapi_lib.is_default(device, interface) == 'DNE':
        module.fail_json(msg='interface does not exist on switch.  Verify '
                         + 'switch platform or create it first with '
                         + "nxapi_interface if it's a logical interface")

    proposed = dict(interface=interface, vrf=vrf)
    existing_ipv4 = nxapi_lib.get_ipv4_interface(device, interface)
    existing = {}

    if existing_ipv4:
        existing['vrf'] = existing_ipv4['vrf']
        existing['interface'] = existing_ipv4['interface'].lower()

    current_vrfs = nxapi_lib.get_vrf_list(device)

    if vrf not in current_vrfs:
        module.fail_json(msg='Ensure the VRF you are trying to config/remove '
                         + 'to an interface is created globally on the device'
                         + ' first.')
    '''
    if vrf != existing['vrf'] and state == 'absent':
        module.fail_json(msg='The VRF you are trying to
            remove from the interface ' \
            + 'does not exist on that interface.',
            interface=interface,proposed_vrf=vrf, \
                            vrf_on_interface=existing['vrf'])
    '''

    commands = []
    if state == 'absent':
        if existing and vrf == existing['vrf']:
            command = ['no vrf member ' + vrf]
            commands.append(command)

    elif state == 'present':
        if existing['vrf'] != vrf:
            command = ['vrf member ' + vrf]
            commands.append(command)
    cmds = ''
    if commands:
        commands.insert(0, ['interface ' + interface])
        cmds = ' '.join(nxapi_lib.cmd_list_to_string(each)
                        for each in commands if each)

    if cmds:
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            device.config(cmds)

    postrun_ipv4 = nxapi_lib.get_ipv4_interface(device, interface)
    postrun = {}
    if postrun_ipv4:
        postrun['vrf'] = postrun_ipv4['vrf']
        postrun['interface'] = postrun_ipv4['interface'].lower()

    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = postrun
    results['state'] = state
    results['commands'] = cmds
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
